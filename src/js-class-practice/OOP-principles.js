// Инкапсуляция:  объединение данных и методов, которые работают с этими данными,
// в единую сущность — объект. Инкапсуляция также предполагает скрытие внутренней
// реализации объекта и предоставление доступа к данным только через публичные методы.

//объединение данных и методов в единую сущность — объект
class Book {
    #size
    constructor(name, price, size) {
        this.name = name
        this.price = price
        //скрытие внутренней реализации объекта и предоставление доступа к данным только через публичные методы
        this.#size = size
    }
    read() {
        console.log( this.name + ' book reading')
    }
    buy() {
        console.log('book buying for ' + this.price)
    }
}


//-------------------------------------------------------------------------------------------------//

//Наследование: позволяет создавать новый класс на основе существующего класса, наследуя его свойства и методы.
// Это позволяет переиспользовать код и добавлять новую функциональность без изменения существующего кода.

class Animal {
    constructor(name) {
        this.name = name
    }

    callAnimal() {
        console.log('Hello ' + this.name)
    }
}

//создавать новый класс на основе существующего класса, наследуя его свойства и методы.
class Dog extends Animal {
    constructor(name, breed) {
        super(name);
        this.breed = breed
    }

    //переиспользовать код и добавлять новую функциональность без изменения существующего кода.
    buyDog() {
        console.log('I want to buy ' + this.name + ', breed: ' + this.breed);
    }
}

//-------------------------------------------------------------------------------------------------//

//Полиморфизм: позволяет использовать объекты разных классов через один и тот же интерфейс,
//при этом каждый объект может вести себя по-разному. Это достигается через переопределение методов.

class Item {
    buyItem() {
        throw new Error('error')
    }
}

class Ball extends Item {
    //переопределение методов
    buyItem() {
        console.log('the ball is not for sale')
    }
}

//--------------------------------------------------------------------------------------------------//

//Абстракция: заключается в выделении существенных характеристик объекта и сокрытии несущественных деталей.
// Это позволяет сфокусироваться на том, что объект делает, а не на том, как он это делает.

class Fly {
    fly() {
        console.log('duck fly')
    }
}

class Duck {
    //выделение существенных характеристик объекта и сокрытии несущественных деталей
    constructor(name) {
        this.fly = new Fly()
        this.name = name
    }
}